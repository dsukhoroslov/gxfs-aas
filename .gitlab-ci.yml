stages:
  - build
  - docker
  - deploy

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  REGISTRY_PATH: ${CI_REGISTRY}/gaia-x/data-infrastructure-federation-services
  TAG: ${CI_PIPELINE_ID}
  IMAGE_NAME: ${CI_PROJECT_NAME}/auth-service-image:${TAG}

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically. Considering this: https://phauer.com/2019/no-fat-jar-in-docker-image/
docker:
  stage: deploy
  image:
    name: maven:3-jdk-11
  only:
    - integration
    - main
    - /^release\/\d*[.]\d*[.]\d*$/
    - tags
  script:
#    - if [ ! -f ci_settings.xml ];
#        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
#      fi
#    - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
    - 'mvn $MAVEN_CLI_OPTS compile jib:build'
    - 'export IMAGE_NAME=${CI_PROJECT_NAME}/auth-service-image'
    - 'mvn $MAVEN_CLI_OPTS compile jib:build'

sast:
  stage: deploy
include:
- template: Security/SAST.gitlab-ci.yml

helm_package:
  stage: deploy
  image: dtzar/helm-kubectl:3.10.1
  rules:
    - if: $CI_TASK == "helm_package" && $CHANNEL
  script:
    - helm dependency update deploy/helm/${CHANNEL}
    - helm package deploy/helm/${CHANNEL} -d deploy/helm/package/${CHANNEL}
    - export FILE_NAME=$(ls deploy/helm/package/${CHANNEL}/*.tgz)
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@${FILE_NAME}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"'


