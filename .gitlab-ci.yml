# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# This template uses jdk8 for verifying and deploying images
image: maven:3-jdk-11

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      - $CI_TASK == "helm_package" && $CHANNEL

# Verify merge requests using JDK11
verify:jdk11:
  <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
deploy:jdk11:
  stage: deploy
  script:
#    - if [ ! -f ci_settings.xml ];
#        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
#      fi
#    - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
    - 'mvn $MAVEN_CLI_OPTS compile jib:build'
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      
sast:
  stage: deploy
include:
- template: Security/SAST.gitlab-ci.yml

helm_package:
  stage: deploy
  image: dtzar/helm-kubectl:3.10.1
  rules:
    - if: $CI_TASK == "helm_package" && $CHANNEL
  script:
    - helm dependency update deploy/helm/${CHANNEL}
    - helm package deploy/helm/${CHANNEL} -d deploy/helm/package/${CHANNEL}
    - export FILE_NAME=$(ls deploy/helm/package/${CHANNEL}/*.tgz)
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@${FILE_NAME}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"'

application-build:
  stage: build
  image:
    name: maven:3-jdk-11
  artifacts:
    paths:
      - deploy/docker/output
  only:
    - integration
    - main
    - /^release\/\d*[.]\d*[.]\d*$/
    - tags
  script:
    - mkdir -p deploy/docker/output
    - rm -rf deploy/docker/output/*
    - mvn clean install -DskipTests
    - cp ./target/*.jar deploy/docker/output/${CI_PROJECT_NAME}.jar

docker-build:
  stage: build
  dependencies:
    - application-build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  only:
    - integration
    - main
    - /^release\/\d*[.]\d*[.]\d*$/
    - tags
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/service"
      --dockerfile "${CI_PROJECT_DIR}/service/Dockerfile"
      --destination "${REGISTRY_PATH}/${IMAGE_NAME}:${TAG}"


      
